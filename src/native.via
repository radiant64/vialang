(begin
  (syntax-transform set-proc! (&proc-name &proc-formals &proc-body)
                    (quote (set! &proc-name (lambda &proc-formals &proc-body))))

  ; Main file will be empty by default.
  (set-proc! @main-file () "")

  (set-proc! map (map-proc map-list)
             (if (nil? (cdr map-list))
               (list (map-proc (car map-list)))
               (cons (map-proc (car map-list)) (map map-proc (cdr map-list)))))

  (set-proc! append (target element)
             (if (nil? target)
               (list element)
               (cons (car target) (append (cdr target) element))))

  (set-proc! concat (a b)
             (if (nil? a)
               b
               (cons (car a) (concat (cdr a) b))))

  (set-proc! cadr (pair)
             (car (cdr pair)))

  (set-proc! caddr (pair)
             (car (cdr (cdr pair))))

  (set-proc! cadddr (pair)
             (car (cdr (cdr (cdr pair)))))

  (set-proc! cdar (pair)
             (cdr (car pair)))

  (set-proc! cddar (pair)
             (cdr (cdr (car pair))))

  (set-proc! cdddar (pair)
             (cdr (cdr (cdr (car pair)))))

  (set-proc! cadar (pair)
             (car (cdr (car pair))))

  (set-proc! cdadr (pair)
             (cdr (car (cdr pair))))

  (set-proc! caar (pair)
             (car (car pair)))
  
  (set-proc! cddr (pair)
             (cdr (cdr pair)))

  (syntax-transform cond (&clauses)
    (letrec ((cond-iter
       (lambda (clause clause-tail)
         (if (eval (car clause))
             (cadr clause)
             (if (nil? clause-tail)
                 (list quote ())
                 (cond-iter (car clause-tail) (cdr clause-tail)))))))
      (cond-iter (car (quote &clauses)) (cdr (quote &clauses)))))

  (syntax-transform let (&definitions &body)
                    (cons (list (quote lambda)
                                (map car (quote &definitions))
                                (list (quote begin) (quote &body)))
                          (map cadr (quote &definitions))))

  (syntax-transform let* (&definitions &body)
                    (list (quote let)
                          (list (car (quote &definitions)))
                          (if (nil? (cdr (quote &definitions)))
                            (list (quote begin) (quote &body))
                            (list (quote let*)
                                  (cdr (quote &definitions))
                                  (quote &body)))))

  (syntax-transform letrec (&definitions &body)
                    (let ((make-set! (lambda (definition)
                                       (list (quote set!)
                                             (car definition)
                                             (cadr definition)))))
                      (cons (quote begin)
                            (append (map make-set! (quote &definitions))
                                    (quote &body)))))

  (syntax-transform for-each (&list &var &body)
                    (letrec ((realize (lambda (&var) (begin &body)))
                             (iterate (lambda (head tail)
                                      (if (nil? tail)
                                        (realize head)
                                        (begin
                                          (realize head)
                                          (iterate (car tail)
                                                   (cdr tail)))))))
                      (iterate (car &list) (cdr &list))))

  (set-proc! reduce (reduce-proc reduce-list init)
                    (letrec ((reduce-iter
                               (lambda (r-proc r-list acc)
                                       (if (nil? (cdr r-list))
                                           (r-proc acc (car r-list))
                                           (reduce-iter
                                             r-proc
                                             (cdr r-list)
                                             (r-proc acc (car r-list)))))))
                            (reduce-iter r-proc r-list init)))

  (syntax-transform include-file (&file-name)
                    (let ((file (file-input-port (file-open &file-name
                                                            (quote input)))))
                      (begin
                        (eval (list (quote syntax-transform)
                                    (quote eval-file)
                                    (list (quote &current-file))
                                    (read-datum file)))
                        (eval-file &file-name))))

  ; These procedures form the interface for interacting with ports.
  (set-proc! read-char (port char-count) (port (quote read-char) char-count))
  (set-proc! read-line (port) (port (quote read-line)))
  (set-proc! write-char (port char-seq) (port (quote write-char) char-seq))
  (set-proc! seek (port offset whence) (port (quote seek) offset whence))
  (set-proc! tell (port) (port (quote tell)))
  (set-proc! eof? (port) (port (quote eof?)))
  (set-proc! close (port) (port (quote close)))

  (set-proc! file-input-port (file-handle)
             (let*
               ((write-excn (lambda ()
                              (throw (make-exception
                                       (quote exc-io-error)
                                       "Can't write to input port"))))
                (read-char (lambda (char-count)
                             (file-read file-handle char-count)))
                (read-line (lambda () (file-read-line file-handle)))
                (write-char write-excn)
                (seek (lambda (offset whence)
                        (file-seek file-handle offset whence)))
                (tell (lambda () (file-tell file-handle)))
                (eof? (lambda () (file-eof? file-handle)))
                (close (lambda () (file-close file-handle))))
               (lambda (operation args) (operation args))))
             
  (set-proc! file-output-port (file-handle)
             (let*
               ((read-excn (lambda ()
                             (throw (make-exception
                                      (quote exc-io-error)
                                      "Can't read from output port"))))
                (read-char read-excn)
                (read-line read-excn)
                (write-char (lambda (char-seq)
                              (file-write file-handle char-seq)))
                (seek (lambda (offset whence)
                        (file-seek file-handle offset whence)))
                (tell (lambda () (file-tell file-handle)))
                (eof? (lambda () (file-eof? file-handle)))
                (close (lambda () (file-close file-handle))))
               (lambda (operation args) (operation args))))

  (set-proc! read-datum (input-port)
             (letrec
               ((read-datum-impl
                 (lambda (acc)
                   (let ((source (join-strings acc (read-line input-port))))
                        (catch (parse source)
                               (if (eof? input-port)
                                 (throw (exception))
                                 (read-datum-impl source)))))))
               (read-datum-impl "")))

  (set-proc! write-datum (output-port datum)
             (write-char output-port (string datum)))

  (set-proc! read () (read-datum (default-input-port)))

  (set-proc! join-strings (strings)
             (let
               ((iterate
                  (lambda (iterate head-string tail-strings acc)
                    (if (nil? tail-strings)
                      (str-concat acc (string head-string))
                      (iterate iterate
                               (car tail-strings)
                               (cdr tail-strings)
                               (str-concat acc (string head-string)))))))
               (iterate iterate (string (car strings)) (cdr strings) "")))

  (set-proc! display (data)
             (if (pair? data)
               (write-datum (default-output-port)
                            (join-strings data))
               (write-datum (default-output-port) data)))

  (set-proc! repl ()
             (let
               ((read-eval-print-loop
                  (lambda (read-eval-print-loop)
                    (begin
                      (display ">>> ")
                      (let ((expr (read)))
                        (if (= expr (quote quit))
                          ()
                          (begin
                            (display "\n" (eval expr) "\n")
                            (read-eval-print-loop read-eval-print-loop))))))))
               (catch (read-eval-print-loop read-eval-print-loop)
                      (if (= (exception-type (exception))
                             (quote exc-end-of-file))
                        ()
                        (begin
                          (display (exception-type (exception)) ": "
                                   (exception-message (exception)) "\n")
                          (display (backtrace (exception-frame (exception)))
                                   "\n")
                          (repl))))))

  (set! default-input-port
    (let ((port (file-input-port (file-stdin)))) (lambda () port)))

  (set! default-output-port
    (let ((port (file-output-port (file-stdout)))) (lambda () port))))

