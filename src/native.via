(begin
  (syntax-transform set-proc! (&proc-name &proc-formals &proc-body)
                    (quote (set! &proc-name (lambda &proc-formals &proc-body))))

  (syntax-transform let (&definitions &body)
                    (cons 
                      (list (quote lambda) (map car (quote &definitions))
                            (quote &body))
                      (map cadr (quote &definitions))))

  (syntax-transform include-file (&file-name)
                    (let
                      ((file-port (open-file-input &file-name)))
                      (read-datum file-port)))

  (syntax-transform for-each (&list &var &body)
                    (quote
                      (let ((realize (lambda (&var) &body))
                            (iterate (lambda (head tail)
                                       (if (nil? tail)
                                         (realize head)
                                         (begin
                                           (realize head)
                                           (iterate (car tail) (cdr tail)))))))
                        (iterate (car &list) (cdr &list)))))

  (set-proc! read () (read-datum (current-input-port)))

  (set-proc! join-strings (strings)
             (let
               ((iterate (lambda (head-string tail-strings acc)
                           (if (nil? tail-strings)
                             (str-concat acc head-string)
                             (iterate (car tail-strings)
                                      (cdr tail-strings)
                                      (str-concat acc head-string))))))
               (iterate (car strings) (cdr strings) "")))

  (set-proc! display (data)
             (if (pair? data)
               (write-datum (current-output-port) 
                            (join-strings (map string data)))
               (write-datum (current-output-port) data)))

  (set-proc! repl ()
             (let
               ((read-eval-print-loop
                  (lambda ()
                    (begin
                      (display ">>> ")
                      (let ((expr (read)))
                        (if (or (eof? (current-input-port))
                                (= expr (quote quit)))
                          ()
                          (begin
                            (display "\n" (eval expr) "\n")
                            (read-eval-print-loop))))))))
               (catch (read-eval-print-loop)
                      (begin
                        (display (exception-type (exception)) ": "
                                 (exception-message (exception)) "\n")
                        (display (backtrace (exception-frame (exception))) "\n")
                        (repl)))))

  (set-proc! map (map-proc map-list)
             (if (nil? map-list)
               ()
               (cons (map-proc (car map-list)) (map map-proc (cdr map-list)))))

  (set-proc! cadr (pair)
             (car (cdr pair)))

  (set-proc! caddr (pair)
             (car (cdr (cdr pair))))

  (set-proc! cadddr (pair)
             (car (cdr (cdr (cdr pair)))))

  (set-proc! cdar (pair)
             (cdr (car pair)))

  (set-proc! cddar (pair)
             (cdr (cdr (car pair))))

  (set-proc! cdddar (pair)
             (cdr (cdr (cdr (car pair)))))

  (set-proc! cadar (pair)
             (car (cdr (car pair))))

  (set-proc! cdadr (pair)
             (cdr (car (cdr pair))))

  (set-proc! caar (pair)
             (car (car pair)))
  
  (set-proc! cddr (pair)
             (cdr (cdr pair))))

