(begin
  (syntax-transform set-proc! (&proc-name &proc-formals &proc-body)
                    (quote (set! &proc-name (lambda &proc-formals &proc-body))))

  (syntax-transform let (&definitions &body)
                    (cons 
                      (list (quote lambda) (map car (quote &definitions))
                            (quote &body))
                      (map cadr (quote &definitions))))

  (syntax-transform for-each (&list &var &body)
                    (quote (begin
                             (set-proc! realize (&var) &body)
                             (set-proc! iterate (head tail)
                                        (if (nil? tail)
                                          (realize head)
                                          (begin (realize head)
                                                 (iterate (car tail)
                                                          (cdr tail)))))
                             (iterate (car &list) (cdr &list)))))

  (set-proc! repl ()
             (begin
               (set-proc! read-eval-print-loop ()
                          (begin
                            (print ">>> ")
                            (display (eval (read)))
                            (read-eval-print-loop)))
               (catch (read-eval-print-loop)
                      (if (= (quote exc-end-of-file)
                             (exception-type (exception)))
                        (print "\nEOF, terminating REPL\n")
                        (begin
                          (display (cons (exception-type (exception))
                                         (exception-message (exception))))
                          (repl))))))

  (set-proc! map (map-proc map-list)
             (if (nil? map-list)
               ()
               (cons (map-proc (car map-list)) (map map-proc (cdr map-list)))))

  (set-proc! cadr (pair)
             (car (cdr pair)))

  (set-proc! caddr (pair)
             (car (cdr (cdr pair))))

  (set-proc! cadddr (pair)
             (car (cdr (cdr (cdr pair)))))

  (set-proc! cdar (pair)
             (cdr (car pair)))

  (set-proc! cddar (pair)
             (cdr (cdr (car pair))))

  (set-proc! cdddar (pair)
             (cdr (cdr (cdr (car pair)))))

  (set-proc! cadar (pair)
             (car (cdr (car pair))))

  (set-proc! cdadr (pair)
             (cdr (car (cdr pair))))

  (set-proc! caar (pair)
             (car (car pair)))
  
  (set-proc! cddr (pair)
             (cdr (cdr pair))))

