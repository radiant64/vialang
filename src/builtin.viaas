;-------------------------------------------------------------------------------
eval-proc:
;-------------------------------------------------------------------------------
    load !expr

    ; Check if the value is a frame, if true assume the frame.
    framep
    skipz @no-frame-assume
        load !expr
        call assume-proc
@no-frame-assume:
    load !expr

    ; Check if the value is a compound expression; if true return the result of
    ; a compound evaluation, replacing the current frame.
    pairp
    skipz @no-eval-compound
        load !expr
        call eval-compound-proc
@no-eval-compound:
    load !expr

    ; Check if the value is a builtin; if true return the result of executing
    ; it, replacing the current frame.
    builtinp
    skipz @no-builtin-exec
        load !expr
        callacc
@no-builtin-exec:
    load !expr
    
    ; Check if the value is a a symbol; if true return the lookup result,
    ; replacing the current frame.
    symbolp
    skipz @no-symbol-lookup
        load !expr
        call lookup-proc
@no-symbol-lookup:
    load !expr

    ; Return the literal result.
    setret
    return


;-------------------------------------------------------------------------------
eval-compound-proc:
;-------------------------------------------------------------------------------
    load !expr
    car

    ; Check if the compound expression is a special form. Special forms are
    ; identified by their head value, which must be a symbol literal that
    ; resolves to a form.
    push
    symbolp
    skipz @skip-special-form-check
        pop
        snap 1
            call lookup-proc
        loadret

        ; If the symbol resolved to a special form, expand the form with the
        ; rest of the expression as context, and evaluate it. 
        formp
        skipz @no-special-form
            load !expr
            cdr
            set !ctxt
            loadret
            call form-expand-proc
    @no-special-form:
        loadret
        jmp @regular-form
@skip-special-form-check:
    pop

    ; Regular form; procedure application.
@regular-form:
    ; Start out by evaluating the procedure value.
    snap @proc-eval-done
        set !expr
        call eval-proc
@proc-eval-done:
    ; Set the !proc register to the result, clear !args, and load the original
    ; expression in the accumulator.
    loadret
    set !proc
    loadnil
    set !args
    load !expr

    ; Iterate over the rest of the expression and evaluate the terms as
    ; arguments.
@arg-eval-loop:
    cdr
    set !expr
    skipz @no-more-args
        ; Save !expr on stack and car into its contents before snapping, to
        ; leave a better stack trace.
        push
        car
        set !expr
        snap @arg-eval-done
            call eval-proc
    @arg-eval-done:
        pop
        set !expr
        loadret
        pusharg
        load !expr
        jmp @arg-eval-loop

@no-more-args:
    call apply-proc


;-------------------------------------------------------------------------------
begin-proc:
;-------------------------------------------------------------------------------
    load !ctxt
    set !expr
@begin-eval-loop:
    cdr
    skipz @begin-last-expression
        snap @begin-expr-eval-done
            load !expr
            car
            set !expr
            call eval-proc
    @begin-expr-eval-done:
        load !expr
        cdr
        set !expr
        jmp @begin-eval-loop

@begin-last-expression:
    ; Replace the current frame.
    load !expr
    car
    set !expr
    call eval-proc


;-------------------------------------------------------------------------------
set-proc:
;-------------------------------------------------------------------------------
    load !ctxt
    cdr
    cdr
    car
    snap @set-value-eval-done
        set !expr
        call eval-proc
@set-value-eval-done:
    loadret
    pusharg
    load !ctxt
    cdr
    car
    push
    call env-set-proc


;-------------------------------------------------------------------------------
if-proc:
;-------------------------------------------------------------------------------
    load !ctxt
    cdr
    car
    snap @if-predicate-eval-done
        set !expr
        call eval-proc
@if-predicate-eval-done:
    loadret
    skipz @if-eval-else-clause
        load !ctxt
        cdr
        cdr
        car
        set !expr
        call eval-proc
@if-eval-else-clause:
    load !ctxt
    cdr
    cdr
    cdr
    skipz @if-no-else-clause
        car
        set !expr
        call eval-proc
@if-no-else-clause:
    return


;-------------------------------------------------------------------------------
and-proc:
;-------------------------------------------------------------------------------
    load !ctxt
    cdr
    car
    snap @and-eval-first-done
        set !expr
        call eval-proc
@and-eval-first-done:
    loadret
    skipz @and-done
        load !ctxt
        cdr
        car
        snap @and-eval-second-done
            set !expr
            call eval-proc
    @and-eval-second-done:
        loadret
@and-done:
    return


;-------------------------------------------------------------------------------
or-proc:
;-------------------------------------------------------------------------------
    load !ctxt
    cdr
    car
    snap @or-eval-first-done
        set !expr
        call eval-proc
@or-eval-first-done:
    loadret
    skipz @or-eval-second
        return
@or-eval-second:
    load !ctxt
    cdr
    cdr
    car
    snap @or-eval-second-done
        set !expr
        call eval-proc
    @or-eval-second-done:
    loadret
    return


;-------------------------------------------------------------------------------
eval-transform-proc:
;-------------------------------------------------------------------------------
    ; Evaluate !expr, and then evaluate the return value as the transformed
    ; expression.
    snap 1
        call eval-proc
    loadret
    set !expr
    call eval-proc

